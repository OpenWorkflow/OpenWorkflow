syntax = "proto3";

package openworkflow;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

/* Workflow represents a directed acyclic graph, which defines the very basic of a workflow.
 * This is the model the scheduler interprets to create jobs. */
message Workflow {
	string workflow_id = 1;
	string description = 2;
	// uint32 version = 3;
	// string owner = 4;
	// string group = 5;

	string schedule = 21;	// cron notation
	google.protobuf.Timestamp start_time = 22;	// ISO 8601
	google.protobuf.Timestamp end_time = 23;	// ISO 8601
	bool catchup = 24;	// Run for the past if start_time is in the past
	uint32 concurrency = 25;
	uint32 max_active_runs = 26;
	google.protobuf.Duration timeout = 27;

	repeated Task tasks = 31;
}

/* RunCondition determines under what condition a task may start. */
enum RunCondition {
	ALL_DONE = 0;
	ONE_DONE = 1;
	ALL_SUCCESS = 2;
	ONE_SUCCESS = 3;
	ALL_FAILED = 4;
	ONE_FAILED = 5;
}

/* Task represents a task within a workflow, which defines an atomic operation.
 * This is the model the scheduler interprets to send to an executor. */
message Task {
	string task_id = 1;
	string workflow_id = 2;
	string description = 3;
	RunCondition condition = 4;
	repeated string downstream_tasks = 5;	// List of task_id's which will run after this task
	uint32 retries = 6;
	google.protobuf.Duration retry_interval = 7;
	//bool depend_on_past = 8;

	Execution execution = 11;
}

/* Define the kind of executor. */
enum ExecutorKind {
	LOCAL = 0;	// run directly on machine that registered
	//KUBERNETES = 1;	// execute dockerimage as pod
	//NIX = 2;	// execute nix-pkg defined image
}

/* Execution for ExecutorKind == LOCAL. */
message LocalExecution {
	string command = 1;
}

message ExecutionDefinition {
	oneof exec {
		LocalExecution local = 1;
	}
}

/* Execution defines how to execute a task. */
message Execution {
	ExecutorDefinition executor = 1;
	ExecutionDefinition execution = 2;
}

/* LocalSpecification for the ExecutorKind == LOCAL. */
message LocalSpecification {
	repeated string packages = 1;
}

message ExecutorSpecification {
	oneof specs {
		LocalSpecification local = 1;
	}
}

message ExecutorDefinition {
	ExecutorKind kind = 1;
	ExecutorSpecification specs = 2;
}

/* RegistrationRequest defines the form of a registration. */
message RegistrationRequest {
	string uri = 1;	// How to reach the executor
	ExecutorDefinition executor_definition = 2;
}
/* RegistrationReply is filled with a unique_id upon registering. */
message RegistrationReply {
	string unique_id = 1;
}

message Heartbeat {
	string unique_id = 1;
}

/* SearchRequest for an executor. */
message SearchRequest {
	ExecutorDefinition executor_definition = 1;
	repeated ExecutorSpecification block_list = 5;
}
/* SearchReply with a URI of a fitting executor. */
message SearchReply {
	string uri = 1;
}

/* ExecutionBroker accepts executors to register themselves and provides a utility for the scheduler
   to find fitting executors for its tasks.
*/
service ExecutionBroker {
	/* Register self (an executor) to the ExecutionBroker. */
	rpc RegisterExecutor (RegistrationRequest) returns (RegistrationReply) {}
	/* HeartBeat to show you have not timed out. */
	rpc HeartBeat (Heartbeat) returns (Heartbeat) {}
	/* FindExecutor to execute a task. */
	rpc FindExecutor (SearchRequest) returns (SearchReply) {}
}

message ExecutionOutput {
	string message = 1;
	repeated string args = 2;
}

/* Executor executes tasks. */
service Executor {
	rpc ExecuteTask (Task) returns (stream ExecutionOutput) {}
}